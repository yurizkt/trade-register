{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":";;;;;;IAAMA,iB;AAEJ,8BAAc;AAAA;;AAER,OAAKC,KAAL,GAAa,IAAIC,WAAJ,EAAb;AACH;;;;6CAEsB;;AAEzB,UAAO,KAAKD,KAAL,CACLE,GADK,CACD,oBADC,EAELC,IAFK,CAEA,uBAAe;AACpB,WAAOC,YAAYC,GAAZ,CAAgB;AAAA,YAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,KAAhB,CAAP;AACA,IAJK,EAKLC,KALK,CAKC,gBAAQ;AACdC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACA,IARK,CAAP;AASA;;;qDAEiC;;AAEjC,UAAO,KAAKhB,KAAL,CACLE,GADK,CACD,sBADC,EAELC,IAFK,CAEA,uBAAe;AACpB,WAAOC,YAAYC,GAAZ,CAAgB;AAAA,YAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,KAAhB,CAAP;AACA,IAJK,EAKLC,KALK,CAKC,gBAAQ;AACdC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACA,IARK,CAAP;AASA;;;sDAEkC;;AAElC,UAAO,KAAKhB,KAAL,CACLE,GADK,CACD,uBADC,EAELC,IAFK,CAEA,uBAAe;AACpB,WAAOC,YAAYC,GAAZ,CAAgB;AAAA,YAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,KAAhB,CAAP;AACA,IAJK,EAKLC,KALK,CAKC,gBAAQ;AACdC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACA,IARK,CAAP;AASA;;;qCAEiB;;AAEjB,UAAOC,QAAQC,GAAR,CAAY,CAClB,KAAKC,wBAAL,EADkB,EAElB,KAAKC,gCAAL,EAFkB,EAGlB,KAAKC,iCAAL,EAHkB,CAAZ,EAIJlB,IAJI,CAIC,oBAAY;;AAEnB,QAAIC,cAAckB,SAChBC,MADgB,CACT,UAACC,KAAD,EAAQC,OAAR;AAAA,YAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,KADS,EACkC,EADlC,EAEhBpB,GAFgB,CAEZ;AAAA,YAAQ,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASoB,KAAKlB,IAAd,CAAf,EAAoCkB,KAAKjB,UAAzC,EAAqDiB,KAAKhB,KAA1D,CAAR;AAAA,KAFY,CAAlB;;AAIA,WAAOP,WAAP;AACA,IAXM,EAWJQ,KAXI,CAWE,gBAAQ;AAChB,UAAM,IAAII,KAAJ,CAAUD,IAAV,CAAN;AACA,IAbM,CAAP;AAcA;;;2BAEQa,U,EAAW;;AAEnB,UAAOC,kBACLC,aADK,GAEL3B,IAFK,CAEA;AAAA,WAAc,IAAI4B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,IAFA,EAGL7B,IAHK,CAGA;AAAA,WAAO8B,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,IAHA,EAILzB,IAJK,CAIA;AAAA,WAAM,mCAAN;AAAA,IAJA,EAKLS,KALK,CAKC,gBAAQ;AACdC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACA,IARK,CAAP;AASA;;;0BAEM;AACN,UAAOa,kBACLC,aADK,GAEL3B,IAFK,CAEA;AAAA,WAAc,IAAI4B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,IAFA,EAGL7B,IAHK,CAGA;AAAA,WAAO8B,IAAIE,UAAJ,EAAP;AAAA,IAHA,EAILvB,KAJK,CAIC,gBAAQ;AACdC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACA,IAPK,CAAP;AAQA;;;0BAEM;;AAEN,UAAOa,kBACLC,aADK,GAEL3B,IAFK,CAEA;AAAA,WAAc,IAAI4B,aAAJ,CAAkBC,UAAlB,CAAd;AAAA,IAFA,EAGL7B,IAHK,CAGA;AAAA,WAAO8B,IAAIG,UAAJ,EAAP;AAAA,IAHA,EAILjC,IAJK,CAIA;AAAA,WAAM,kCAAN;AAAA,IAJA,EAKLS,KALK,CAKC,gBAAQ;AACdC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACA,IARK,CAAP;AASA;;;0BAEOqB,U,EAAY;;AAEd,UAAO,KAAKC,gBAAL,GACFnC,IADE,CACG;AAAA,WACFC,YAAYmC,MAAZ,CAAmB;AAAA,YACf,CAACF,WAAWG,IAAX,CAAgB;AAAA,aACbZ,WAAWa,QAAX,CAAoBC,mBAApB,CADa;AAAA,MAAhB,CADc;AAAA,KAAnB,CADE;AAAA,IADH,EAMF9B,KANE,CAMI,gBAAQ;AACXC,YAAQC,GAAR,CAAYC,IAAZ;AACA,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH,IATE,CAAP;AAUH","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\n\n\t constructor() {\n        \n        this._http = new HttpService();\n    }\n\n\tobterNegociacoesDaSemana(){\n\n\t\treturn this._http\n\t\t\t.get('negociacoes/semana')\n\t\t\t.then(negociacoes => {\n\t\t\t\treturn negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n\t\t\t})\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro)\n\t\t\t\tthrow new Error('Não foi possível obter as negociações da semana')\n\t\t\t})\n\t}\n\n\tobterNegociacoesDaSemanaAnterior(){\n\n\t\treturn this._http\n\t\t\t.get('negociacoes/anterior')\n\t\t\t.then(negociacoes => {\n\t\t\t\treturn negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n\t\t\t})\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro)\n\t\t\t\tthrow new Error('Não foi possível obter as negociações da semana anterior')\n\t\t\t})\n\t}\n\n\tobterNegociacoesDaSemanaRetrasada(){\n\n\t\treturn this._http\n\t\t\t.get('negociacoes/retrasada')\n\t\t\t.then(negociacoes => {\n\t\t\t\treturn negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n\t\t\t})\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro)\n\t\t\t\tthrow new Error('Não foi possível obter as negociações da semana retrasada')\n\t\t\t})\n\t}\n\n\tobterNegociacoes(){\n\n\t\treturn Promise.all([\n\t\t\tthis.obterNegociacoesDaSemana(),\n\t\t\tthis.obterNegociacoesDaSemanaAnterior(),\n\t\t\tthis.obterNegociacoesDaSemanaRetrasada()\n\t\t]).then(periodos => {\n\n\t\t\tlet negociacoes = periodos\n\t\t\t\t.reduce((dados, periodo) => dados.concat(periodo), [])\n\t\t\t\t.map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor))\n\n\t\t\treturn negociacoes\n\t\t}).catch(erro => {\n\t\t\tthrow new Error(erro)\n\t\t})\n\t}\n\n\tcadastra(negociacao){\n\n\t\treturn ConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(connection => new NegociacaoDao(connection))\n\t\t\t.then(dao => dao.adiciona(negociacao))\n\t\t\t.then(() => 'Negociação adicionada com sucesso')\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro)\n\t\t\t\tthrow new Error('Não foi possível adicionar a negociação')\n\t\t\t})\t\t\t\t\n\t}\n\n\tlista(){\n\t\treturn ConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(connection => new NegociacaoDao(connection))\n\t\t\t.then(dao => dao.listaTodos())\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro)\n\t\t\t\tthrow new Error('Não foi possível obter as negociações')\t\n\t\t\t})\n\t}\n\n\tapaga(){\n\n\t\treturn ConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(connection => new NegociacaoDao(connection))\n\t\t\t.then(dao => dao.apagaTodos())\n\t\t\t.then(() => 'Negociações apagadas com sucesso')\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro)\n\t\t\t\tthrow new Error('Não foi possível apagar as negociações')\n\t\t\t})\n\t}\n\n\timporta(listaAtual) {\n\n       return this.obterNegociacoes()\n           .then(negociacoes =>\n               negociacoes.filter(negociacao =>\n                   !listaAtual.some(negociacaoExistente =>\n                       negociacao.isEquals(negociacaoExistente)))\n           )\n           .catch(erro => {\n               console.log(erro);\n               throw new Error(\"Não foi possível importar as negociações\");\n           });\n   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}