{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","database","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,S,GAAS,CAAC,YAAD,C;AACTC,U,GAAU,C;AACVC,W,GAAW,e;AAEbC,a,GAAa,I;AAEbC,Q,GAAQ,I;;gCAECC,iB;AAEZ,iCAAa;AAAA;;AACZ,WAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACA;;;;qCAEqB;AACrB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,WAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,QAAtB,EAAgCD,OAAhC,CAAlB;;AAEAS,mBAAYI,eAAZ,GAA8B,aAAK;;AAElCC,gBAAQC,GAAR,CAAY,sCAAZ;;AAEAX,0BAAkBY,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,QALD;;AAOAV,mBAAYW,SAAZ,GAAwB,aAAK;;AAE5B,YAAG,CAAClB,UAAJ,EAAe;AACdA,sBAAae,EAAEC,MAAF,CAASC,MAAtB;AACAhB,iBAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,oBAAWC,KAAX,GAAmB,YAAU;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACA,UAFD;AAGA;AACDE,gBAAQL,UAAR;AACA,QAVD;;AAYAO,mBAAYa,OAAZ,GAAsB,aAAK;AAC1BR,gBAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASK,KAArB;;AAEAf,eAAOS,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACA,QAJD;AAKA,OA5BM,CAAP;AA6BA;;;mCAEoBtB,U,EAAW;AAC/BH,aAAO0B,OAAP,CAAe,iBAAS;AACvB,WAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACC1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACF1B,kBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACC,OAJD;AAKA;;;uCAEuB;AACvB,UAAG,CAAC7B,UAAJ,EAAe;AACdC;AACAD,oBAAa,IAAb;AACA;AACD","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacao']\nconst version = 4\nconst database = 'traderegister'\n\nlet connection = null\n\nlet close = null\n\nexport class ConnectionFactory{\n\n\tconstructor(){\n\t\tthrow new Error('Não é possível criar instâncias de Connection Factory')\n\t}\n\n\tstatic getConnection(){\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tlet openRequest = window.indexedDB.open(database, version)\n\n\t\t\topenRequest.onupgradeneeded = e => {\n\n\t\t\t\tconsole.log('Cria ou altera um banco já existente')\n\n\t\t\t\tConnectionFactory._createStores(e.target.result)\n\t\t\t}\n\n\t\t\topenRequest.onsuccess = e => {\n\n\t\t\t\tif(!connection){\n\t\t\t\t\tconnection = e.target.result\n\t\t\t\t\tclose = connection.close.bind(connection)\n\t\t\t\t\tconnection.close = function(){\n\t\t\t\t\t\tthrow new Error('Você não pode fechar diretamente a conexão')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresolve(connection)\n\t\t\t}\n\n\t\t\topenRequest.onerror = e => {\n\t\t\t\tconsole.log(e.target.error)\n\n\t\t\t\treject(e.target.error.name)\n\t\t\t}\n\t\t})\n\t}\n\n\tstatic _createStores(connection){\n\t\tstores.forEach(store => {\n\t\t\tif(connection.objectStoreNames.contains(store))\n\t\t\t\tconnection.deleteObjectStore(store)\n\t\tconnection.createObjectStore(store, {autoIncrement: true})\n\t\t})\n\t}\n\n\tstatic closeConnection(){\n\t\tif(!connection){\n\t\t\tclose()\n\t\t\tconnection = null\n\t\t}\n\t}\n}\n"]}