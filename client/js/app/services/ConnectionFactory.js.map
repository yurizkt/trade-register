{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","database","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","console","log","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAU;;AAElC,KAAMC,SAAS,CAAC,YAAD,CAAf;AACA,KAAMC,UAAU,CAAhB;AACA,KAAMC,WAAW,eAAjB;;AAEA,KAAIC,aAAa,IAAjB;;AAEA,KAAIC,QAAQ,IAAZ;;AAEA;AAEC,+BAAa;AAAA;;AACZ,SAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACA;;AAJF;AAAA;AAAA,mCAMuB;AACrB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,QAAtB,EAAgCD,OAAhC,CAAlB;;AAEAQ,iBAAYI,eAAZ,GAA8B,aAAK;;AAElCC,cAAQC,GAAR,CAAY,sCAAZ;;AAEAhB,wBAAkBiB,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,MALD;;AAOAV,iBAAYW,SAAZ,GAAwB,aAAK;;AAE5B,UAAG,CAACjB,UAAJ,EAAe;AACdA,oBAAac,EAAEC,MAAF,CAASC,MAAtB;AACAf,eAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,kBAAWC,KAAX,GAAmB,YAAU;AAC5B,cAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACA,QAFD;AAGA;AACDE,cAAQJ,UAAR;AACA,MAVD;;AAYAM,iBAAYa,OAAZ,GAAsB,aAAK;AAC1BR,cAAQC,GAAR,CAAYE,EAAEC,MAAF,CAASK,KAArB;;AAEAf,aAAOS,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACA,MAJD;AAKA,KA5BM,CAAP;AA6BA;AApCF;AAAA;AAAA,iCAsCsBrB,UAtCtB,EAsCiC;AAC/BH,WAAOyB,OAAP,CAAe,iBAAS;AACvB,SAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACCzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACFzB,gBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACC,KAJD;AAKA;AA5CF;AAAA;AAAA,qCA8CyB;AACvB,QAAG,CAAC5B,UAAJ,EAAe;AACdC;AACAD,kBAAa,IAAb;AACA;AACD;AAnDF;;AAAA;AAAA;AAsDA,CAhEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function(){\n\n\tconst stores = ['negociacao']\n\tconst version = 4\n\tconst database = 'traderegister'\n\n\tvar connection = null\n\n\tvar close = null\n\n\treturn class ConnectionFactory{\n\n\t\tconstructor(){\n\t\t\tthrow new Error('Não é possível criar instâncias de Connection Factory')\n\t\t}\n\n\t\tstatic getConnection(){\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\tlet openRequest = window.indexedDB.open(database, version)\n\n\t\t\t\topenRequest.onupgradeneeded = e => {\n\n\t\t\t\t\tconsole.log('Cria ou altera um banco já existente')\n\n\t\t\t\t\tConnectionFactory._createStores(e.target.result)\n\t\t\t\t}\n\n\t\t\t\topenRequest.onsuccess = e => {\n\n\t\t\t\t\tif(!connection){\n\t\t\t\t\t\tconnection = e.target.result\n\t\t\t\t\t\tclose = connection.close.bind(connection)\n\t\t\t\t\t\tconnection.close = function(){\n\t\t\t\t\t\t\tthrow new Error('Você não pode fechar diretamente a conexão')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresolve(connection)\n\t\t\t\t}\n\n\t\t\t\topenRequest.onerror = e => {\n\t\t\t\t\tconsole.log(e.target.error)\n\n\t\t\t\t\treject(e.target.error.name)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tstatic _createStores(connection){\n\t\t\tstores.forEach(store => {\n\t\t\t\tif(connection.objectStoreNames.contains(store))\n\t\t\t\t\tconnection.deleteObjectStore(store)\n\t\t\tconnection.createObjectStore(store, {autoIncrement: true})\n\t\t\t})\n\t\t}\n\n\t\tstatic closeConnection(){\n\t\t\tif(!connection){\n\t\t\t\tclose()\n\t\t\t\tconnection = null\n\t\t\t}\n\t\t}\n\t}\n\n})()\n"]}